name: Reusable workflow

on:
  workflow_call:

jobs:
  Autoformat:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@main
        with:
          ref: ${{ github.head_ref }}

      - name: Clang-format style check
        uses: THI-Drone/action-clang-format@main

      - name: Autopep8 style check
        uses: THI-Drone/action-autopep@main


  Build-and_test:
    needs: Autoformat
    runs-on: self-hosted

    steps:

    - name: Get the date
      id: date
      run: echo "date=$(date +'%F_%H-%M-%S')" >> $GITHUB_OUTPUT

    - name: Setup Docker Container 
      run: | 
        CONTAINER_NAME="ros-container"
        IMAGE="ros:humble"
        OLD_ID=$(docker inspect --format "{{.Id}}" $IMAGE)
        docker pull $IMAGE
        NEW_ID=$(docker inspect --format "{{.Id}}" $IMAGE)
        INSTALL_DEPENDENCIES=false
        
        if [ "$OLD_ID" != "$NEW_ID" ]; then
          echo "update container"
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
          docker run --name $CONTAINER_NAME -i -d $IMAGE bash
          INSTALL_DEPENDENCIES=true
        else
          echo "using current image, as it is up to date"
          CONTAINER_ID=$(docker ps -a -q --filter name="^/${CONTAINER_NAME}$")

          if [ -z "$CONTAINER_ID" ]; then
            echo "run new container"
            docker run --name $CONTAINER_NAME  -i -d $IMAGE bash
            INSTALL_DEPENDENCIES=true
          else
            RUNNING_CONTAINER_ID=$(docker ps -q --filter name="^/${CONTAINER_NAME}$")

            if [ -z "$RUNNING_CONTAINER_ID" ]; then
                echo "start container"
                docker start $CONTAINER_NAME
                docker exec -i $CONTAINER_NAME /bin/bash -c "rm -rf /thi-drone-ws/"
            else
                echo "restart container"
                docker restart $CONTAINER_NAME
                docker exec -i $CONTAINER_NAME /bin/bash -c "rm -rf /thi-drone-ws/"
            fi
          fi
        fi
        docker system prune -a -f
        if [ "$INSTALL_DEPENDENCIES" = true ]; then
          docker exec -i $CONTAINER_NAME /bin/bash -c "apt-get update && apt-get install -y nlohmann-json3-dev && apt-get install -y python3-pip && pip install setuptools==58.2.0 && pip install pytest && rosdep update && pip install coverage && pip install colcon-coveragepy-result && pip install pytest-cov && apt-get install ros-humble-ament-cmake -y && apt-get install ros-humble-ament-cmake-clang-format -y && apt-get install ros-humble-ament-cmake-cppcheck -y && apt-get install ros-humble-ament-cmake-cpplint -y && apt-get install ros-humble-ament-cmake-flake8 -y && apt-get install ros-humble-ament-cmake-lint-cmake -y && apt-get install ros-humble-ament-cmake-pep257 -y && apt-get install gcc lcov -y && apt-get install python3-colcon-lcov-result && apt-get install lcov -y"
        fi

    - name: Clone repository
      run: |
        REPONAME=$(basename ${{github.repository}})
        docker exec -i ros-container /bin/bash -c "git clone --recursive --branch dev https://github.com/THI-Drone/thi-drone-ws.git && cd thi-drone-ws && git submodule foreach git checkout dev && git submodule foreach git pull origin dev"
        docker exec -i ros-container /bin/bash -c "source /opt/ros/humble/setup.bash && cd thi-drone-ws/src/$REPONAME && git fetch --all && git checkout ${{ github.head_ref }}"
        
    - name: Build and test
      run: |
        REPONAME=$(basename ${{github.repository}})
        docker exec -i ros-container /bin/bash -c "source /opt/ros/humble/setup.bash && cd thi-drone-ws/ && rosdep fix-permissions && rosdep update && rosdep install --from-paths src --ignore-src -r -y"
        docker exec -i ros-container /bin/bash -c "source /opt/ros/humble/setup.bash && cd thi-drone-ws/ && colcon build --packages-up-to $REPONAME --cmake-args -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS='--coverage' -DCMAKE_CXX_FLAGS='--coverage' -DCMAKE_EXPORT_COMPILE_COMMANDS=ON && colcon lcov-result --initial --packages-up-to $REPONAME && colcon test --packages-up-to $REPONAME --pytest-args '--cov=.' '--cov-report=html' '--cov-branch'"
        
        set +e
        docker exec -i ros-container /bin/bash -c "source /opt/ros/humble/setup.bash && cd thi-drone-ws/ && colcon lcov-result --paths ./src/$REPONAME"
        set -e
        docker exec -i ros-container /bin/bash -c "cd /thi-drone-ws/src/$REPONAME && \
          if [ -f coverage ]; then \
            coverage report; \
          fi" > coverage_output
        docker exec -i ros-container /bin/bash -c "cd /thi-drone-ws/lcov && \
          if [ -f total_coverage.info ]; then \
            lcov --list ./total_coverage.info; \
          fi" >> coverage_output

        awk 'BEGIN{print "<pre>";} {print}' coverage_output > temp.txt && mv temp.txt coverage_output
        echo -e "<pre>" >> coverage_output

    - name: Copy coverage report from container to workspace
      id: copy-coverage
      run: |
        REPONAME=$(basename ${{github.repository}})
        rm -rf ./coverage_html

        htmlcov_exists=$(docker exec ros-container test -d /thi-drone-ws/src/$REPONAME/htmlcov && echo yes || echo no)
        if [ "$htmlcov_exists" == "yes" ]; then docker cp ros-container:/thi-drone-ws/src/$REPONAME/htmlcov ./coverage_html; fi

        lcov_exists=$(docker exec ros-container test -d /thi-drone-ws/lcov && echo yes || echo no)
        if [ "$lcov_exists" == "yes" ]; then docker cp ros-container:/thi-drone-ws/lcov ./coverage_html; fi
        
    - name: PR comment
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: ./coverage_output

    - name: Upload coverage report
      uses: actions/upload-artifact@main
      with:
        name: coverage-report-${{ steps.date.outputs.date }}
        path: ./coverage_html

    - name: Copy logs from container to workspace
      if: failure()
      run: |
        REPONAME=$(basename ${{github.repository}})
        rm -rf ./log
        docker cp ros-container:/thi-drone-ws ./log
    
    - name: Upload build-logs
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-logs-${{ steps.date.outputs.date }}
        path: ./log
      


